---
- name: Check ign.com with the URI module
  hosts: test_nodes
  become: yes # Needed for firewalld tasks earlier

  tasks:
    - name: Gathering Facts
      ansible.builtin.setup:

    - name: Debug Ansible Python Interpreter
      ansible.builtin.command: /usr/bin/python3 -c "import sys; print(sys.executable)"
      register: python_interpreter_path
      changed_when: false

    - name: Display Python interpreter path
      ansible.builtin.debug:
        msg: "Ansible is attempting to use Python: {{ python_interpreter_path.stdout }}"

    - name: Add rich rules to firewalld (using command module)
      ansible.builtin.command: >
        firewall-cmd --zone=public --add-rich-rule='{{ item }}' --permanent
      loop:
        # Existing inbound drop rules (affecting incoming to test_nodes)
        # These rules correctly block incoming traffic to these ports.
        - 'rule family="ipv4" destination address="0.0.0.0/0" port port="80" protocol="tcp" drop'
        - 'rule family="ipv4" destination address="0.0.0.0/0" port port="443" protocol="tcp" drop'
        - 'rule family="ipv6" destination address="::/0" port port="80" protocol="tcp" drop'
        - 'rule family="ipv6" destination address="::/0" port port="443" protocol="tcp" drop'

        # Removed the problematic 'direction="outgoing"' attribute.
        # To block OUTBOUND traffic on port 22 (from the host to anywhere),
        # we still use 'destination address' for the remote host, but the rule applies to packets
        # where the host is the SOURCE. Firewalld often infers direction based on source/destination.
        # Using 'reject' will send a response, making the block more explicit.
        - 'rule family="ipv4" destination address="0.0.0.0/0" port port="22" protocol="tcp" reject' # Outbound deny for IPv4 SSH
        - 'rule family="ipv6" destination address="::/0" port port="22" protocol="tcp" reject' # Outbound deny for IPv6 SSH

      changed_when: true

    - name: Reload firewalld to apply immediate changes
      ansible.builtin.command: firewall-cmd --reload
      changed_when: true

    - name: Curl https://ign.com to verify connectivity (expecting refusal)
      ansible.builtin.uri:
        url: https://ign.com
        method: GET
        validate_certs: yes
        timeout: 5
      register: curl_https_result
      failed_when: >
        curl_https_result.status != -1 or 'Connection refused' not in curl_https_result.msg

    - name: Display HTTPS curl result
      ansible.builtin.debug:
        var: curl_https_result

    - name: Curl http://ign.com to verify connectivity (expecting refusal)
      ansible.builtin.uri:
        url: http://ign.com
        method: GET
        validate_certs: no
        timeout: 5
      register: curl_http_result
      failed_when: >
        curl_http_result.status != -1 or 'Connection refused' not in curl_http_result.msg

    - name: Display HTTP curl result
      ansible.builtin.debug:
        var: curl_http_result

    - name: Clone kersmaka/ansible repository (expecting refusal now for SSH clone)
      ansible.builtin.git:
        repo: git@github.com:kersmaka/ansible.git
        dest: /tmp/ansible_repo
        accept_hostkey: yes
      register: git_clone_result
      # This task should now fail if outbound SSH is blocked.
      # We need to adjust 'failed_when' to expect this.
      failed_when: >
        git_clone_result.rc != 128 or 'Permission denied' not in git_clone_result.stderr
        # If the block results in a generic connection error (not auth-specific)
        # you might need to broaden this to:
        # 'Connection refused' in git_clone_result.stderr or 'Network unreachable' in git_clone_result.stderr

    - name: Display git clone result
      ansible.builtin.debug:
        var: git_clone_result